name: CmdStan tarball builder

'on':
  workflow_dispatch:
    inputs:
      tarball_name: 
        description: 'CmdStan build name'
        required: true
        default: ''
      cmdstan_repo:
        description: 'CmdStan repo'
        required: true
        default: 'stan-dev/cmdstan'
      cmdstan_branch:
          description: 'CmdStan branch'
          required: true
          default: 'develop'
      stan_repo:
        description: 'Stan repo'
        required: true
        default: 'stan-dev/stan'
      stan_branch:
          description: 'Stan branch'
          required: true
          default: 'develop'
      math_repo:
        description: 'Math repo'
        required: true
        default: 'stan-dev/math'
      math_branch:
          description: 'Math branch'
          required: true
          default: 'develop'
      stanc3_repo:
        description: 'Stanc3 repo'
        required: true
        default: 'stan-dev/stanc3'
      stanc3_branch:
          description: 'Stanc3 branch'
          required: true
          default: 'master'
jobs:
  linux:
    runs-on: ubuntu-20.04
    container:
      image: ocaml/opam2:alpine-3.9-ocaml-4.07
      options: --user root
    steps:    
      - name: Checkout stanc3
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.stanc3_repo }}
          ref: ${{ github.event.inputs.stanc3_branch }}

      - name: opam caching
        id: opam-cache
        uses: actions/cache@v2
        with:
          path: "~/.opam"
          key: linux-stanc-binary-4.12.0

      - name: Install dependencies
        run: |
          opam init --disable-sandboxing -y
          opam switch 4.12.0 || opam switch create 4.12.0
          eval $(opam env)
          opam repo add internet https://opam.ocaml.org
          opam update
          bash -x scripts/install_build_deps.sh

      - name: Build static Linux binaries
        run: |
          eval $(opam env)
          dune subst
          dune build @install --profile static
          mv _build/default/src/stanc/stanc.exe ${{ github.job }}-stanc
      
      - name: Upload Linux stanc
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-stanc
          path: ${{ github.job }}-stanc

  windows:
    runs-on: ubuntu-20.04
    container:
      image: ubuntu:bionic
      options: --user root
    steps:    
      - name: Checkout stanc3
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.stanc3_repo }}
          ref: ${{ github.event.inputs.stanc3_branch }}

      - name: opam caching
        id: opam-cache
        uses: actions/cache@v2
        with:
          path: "~/.opam"
          key: windows-stanc-binary-4.12.0

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt-get install -y --no-install-recommends ca-certificates rsync git build-essential m4 sudo \
          unzip pkg-config libpcre3-dev mingw-w64 gcc wget gawk bubblewrap
          wget https://github.com/ocaml/opam/releases/download/2.0.4/opam-2.0.4-x86_64-linux
          sudo install opam-2.0.4-x86_64-linux /usr/local/bin/opam
          opam init $1 --disable-sandboxing -y
          eval $(opam env)
          opam switch stanc || opam switch create stanc ocaml-base-compiler.4.12.0
          eval $(opam env)
          bash -x scripts/install_build_deps_windows.sh
          eval $(opam env)  
          opam pin -y js_of_ocaml-ppx 3.11.0
          opam install -y js_of_ocaml-ppx

      - name: Build Windows binaries
        run: |
          eval $(opam env)
          dune subst
          dune build -x windows
          mv _build/default.windows/src/stanc/stanc.exe ${{ github.job }}-stanc

      - name: Upload Windows stanc
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-stanc
          path: ${{ github.job }}-stanc
  mac:
    runs-on: macOS-latest
    steps:    
      - name: Checkout stanc3
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.stanc3_repo }}
          ref: ${{ github.event.inputs.stanc3_branch }}

      - name: opam caching
        id: opam-cache
        uses: actions/cache@v2
        with:
          path: "~/.opam"
          key: macOS-stanc-binary-4.12.0

      - name: Install dependencies
        run: |
          brew install gpatch
          brew install opam
          opam init --disable-sandboxing -y
          eval $(opam env)
          opam switch 4.12.0 || opam switch create 4.12.0          
          eval $(opam env)
          bash -x scripts/install_build_deps.sh

      - name: Build MacOS binaries
        run: |
          eval $(opam env)
          dune subst
          dune build @install
          mv _build/default/src/stanc/stanc.exe ${{ github.job }}-stanc
      
      - name: Upload MacOS binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-stanc
          path: ${{ github.job }}-stanc
  build:
    needs:  [linux, windows, mac]
    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.cmdstan_repo }}
        ref: ${{ github.event.inputs.cmdstan_branch }}
        path: cmdstan

    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.stan_repo }}
        ref: ${{ github.event.inputs.stan_branch }}
        path: cmdstan/stan

    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.math_repo }}
        ref: ${{ github.event.inputs.math_branch }}
        path: cmdstan/stan/lib/stan_math
    
    - name: Building
      run: |
        cd cmdstan
        make build
        make clean-all
    
    - name: install git-archive-all
      run: |
        pip install git-archive-all

    - name: Package tarball part 1
      run: |
        cd cmdstan
        git-archive-all cmdstan-${{ github.event.inputs.tarball_name }}.tar.gz
        mv cmdstan-${{ github.event.inputs.tarball_name }}.tar.gz ../cmdstan-${{ github.event.inputs.tarball_name }}.tar.gz
        cd ..
        mkdir cmdstan-${{ github.event.inputs.tarball_name }}
        tar -xvzf cmdstan-${{ github.event.inputs.tarball_name }}.tar.gz
    
    - name: Download MacOS binaries
      uses: actions/download-artifact@v4.1.7
      with:
          name: mac-stanc
          path: bins/mac-stanc

    - name: Download Linux binaries
      uses: actions/download-artifact@v4.1.7
      with:
          name: linux-stanc
          path: bins/linux-stanc

    - name: Download Windows binaries
      uses: actions/download-artifact@v4.1.7
      with:
          name: windows-stanc
          path: bins/windows-stanc

    - name: Package tarball part 2
      run: |
        mkdir cmdstan-${{ github.event.inputs.tarball_name }}/bin
        mv bins/linux-stanc/linux-stanc cmdstan-${{ github.event.inputs.tarball_name }}/bin/linux-stanc
        mv bins/windows-stanc/windows-stanc cmdstan-${{ github.event.inputs.tarball_name }}/bin/windows-stanc
        mv bins/mac-stanc/mac-stanc cmdstan-${{ github.event.inputs.tarball_name }}/bin/mac-stanc
        tar -cvzf cmdstan-${{ github.event.inputs.tarball_name }}.tar.gz cmdstan-${{ github.event.inputs.tarball_name }}
        ls -l

    - name: Upload tarball
      uses: actions/upload-artifact@v2
      with:
        name:  cmdstan-${{ github.event.inputs.tarball_name }}
        path: 'cmdstan-${{ github.event.inputs.tarball_name }}.tar.gz'
